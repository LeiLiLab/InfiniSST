#!/usr/bin/env python3\n\"\"\"\n诊断PREFILL重复入队问题\n检查是否存在session状态混乱或重复prefill\n\"\"\"\n\nimport requests\nimport json\nfrom typing import Dict, Any, List\n\ndef diagnose_prefill_issue(server_url: str = \"https://infinisst.ngrok.app\"):\n    \"\"\"专门诊断prefill重复问题\"\"\"\n    print(\"🔍 诊断PREFILL重复入队问题\")\n    print(\"=\" * 60)\n    \n    try:\n        # 获取详细的诊断信息\n        response = requests.get(f\"{server_url}/diagnose\", timeout=10)\n        if response.status_code != 200:\n            print(f\"❌ 无法获取诊断信息: {response.status_code}\")\n            return\n        \n        data = response.json()\n        queue_stats = data.get('queue_stats', {})\n        detailed_info = queue_stats.get('detailed_queue_info', {})\n        \n        print(\"📊 **队列状态分析**:\")\n        for gpu_id, info in detailed_info.items():\n            prefill_count = info.get('prefill_queue_size', 0)\n            decode_count = info.get('decode_queue_size', 0)\n            language = info.get('language', 'unknown')\n            \n            print(f\"🖥️ GPU {gpu_id} ({language}):\")\n            print(f\"   PREFILL队列: {prefill_count} 个请求\")\n            print(f\"   DECODE队列: {decode_count} 个请求\")\n            \n            if prefill_count > 1:\n                print(f\"   🚨 **异常**: {prefill_count} 个PREFILL请求！正常应该最多1个\")\n            \n        # 检查session状态\n        print(\"\\n👥 **Session状态分析**:\")\n        total_requests = queue_stats.get('total_requests', 0)\n        completed_requests = queue_stats.get('completed_requests', 0)\n        active_sessions = queue_stats.get('active_sessions', 0)\n        \n        print(f\"   总请求数: {total_requests}\")\n        print(f\"   已完成请求: {completed_requests}\")\n        print(f\"   活跃Sessions: {active_sessions}\")\n        \n        # 检查不活跃session\n        inactive_sessions = queue_stats.get('inactive_sessions', [])\n        if inactive_sessions:\n            print(f\"\\n⏰ **不活跃Sessions**: {len(inactive_sessions)} 个\")\n            for session in inactive_sessions[:5]:  # 只显示前5个\n                print(f\"   - {session['session_id'][:8]}... (用户: {session['user_id']}, 不活跃: {session['inactive_seconds']:.1f}s)\")\n                print(f\"     音频: {session['source_length']} 样本, 翻译: {session['target_segments']} 段\")\n        \n        # 分析可能的问题\n        print(\"\\n🔍 **问题分析**:\")\n        \n        total_prefill = sum(info.get('prefill_queue_size', 0) for info in detailed_info.values())\n        total_decode = sum(info.get('decode_queue_size', 0) for info in detailed_info.values())\n        \n        if total_prefill > active_sessions:\n            print(f\"   🚨 PREFILL请求数({total_prefill}) > 活跃Sessions({active_sessions})\")\n            print(f\"   可能原因: 内存不足导致PREFILL重试, 或session状态混乱\")\n        \n        if total_prefill == 0 and total_decode == 0 and active_sessions > 0:\n            print(f\"   🚨 有活跃Sessions({active_sessions})但队列为空\")\n            print(f\"   可能原因: 请求处理卡住, 或前端停止发送数据\")\n        \n        if total_prefill > 1:\n            print(f\"   🚨 多个PREFILL请求({total_prefill})同时存在\")\n            print(f\"   可能原因:\")\n            print(f\"     1. 页面池耗尽导致PREFILL重试\")\n            print(f\"     2. 多个用户同时开始新翻译\")\n            print(f\"     3. Session状态管理错误\")\n            print(f\"     4. 前端重复发送初始音频\")\n        \n        # 检查内存使用情况\n        print(\"\\n💾 **内存使用推断**:\")\n        if 'memory_pressure' in data:\n            memory_info = data['memory_pressure']\n            print(f\"   内存压力: {memory_info}\")\n        else:\n            # 根据队列状态推断内存使用\n            estimated_pages = total_prefill * 20 + total_decode * 5  # 粗略估算\n            print(f\"   估算页面使用: ~{estimated_pages} 页\")\n            \n            if estimated_pages > 400:  # 假设总页面数为576\n                print(f\"   🚨 可能接近页面池上限\")\n            elif estimated_pages > 200:\n                print(f\"   ⚠️ 页面使用较高\")\n            else:\n                print(f\"   ✅ 页面使用正常\")\n        \n        # 建议解决方案\n        print(\"\\n💡 **建议解决方案**:\")\n        \n        if total_prefill > 1:\n            print(\"   1. 🔧 修复PREFILL重试机制:\")\n            print(\"       - 限制PREFILL重试次数为1次\")\n            print(\"       - 增加session状态检查，避免重复prefill\")\n            \n            print(\"   2. 🧹 清理重复的PREFILL请求:\")\n            print(\"       - 检查是否是同一session的重复请求\")\n            print(\"       - 清理不必要的重试请求\")\n            \n            print(\"   3. 💾 优化内存管理:\")\n            print(\"       - 及时清理不活跃session\")\n            print(\"       - 减少每个session的页面使用\")\n        \n        return {\n            'total_prefill': total_prefill,\n            'total_decode': total_decode,\n            'active_sessions': active_sessions,\n            'has_prefill_issue': total_prefill > 1,\n            'possible_memory_issue': estimated_pages > 300\n        }\n        \n    except Exception as e:\n        print(f\"❌ 诊断失败: {e}\")\n        return None\n\nif __name__ == \"__main__\":\n    import argparse\n    \n    parser = argparse.ArgumentParser(description=\"诊断PREFILL重复入队问题\")\n    parser.add_argument(\"--server\", default=\"https://infinisst.ngrok.app\", \n                       help=\"服务器URL\")\n    \n    args = parser.parse_args()\n    result = diagnose_prefill_issue(args.server)\n    \n    if result:\n        if result['has_prefill_issue']:\n            print(f\"\\n🚨 确认存在PREFILL重复问题: {result['total_prefill']} 个PREFILL请求\")\n            exit(1)\n        else:\n            print(f\"\\n✅ PREFILL状态正常\")\n            exit(0) 