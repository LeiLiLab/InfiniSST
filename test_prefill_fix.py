#!/usr/bin/env python3\n\"\"\"\n测试PREFILL修复效果\n验证修复后的scheduler不会出现重复prefill问题\n\"\"\"\n\nimport requests\nimport time\nimport json\n\ndef test_prefill_fix(server_url=\"https://infinisst.ngrok.app\"):\n    \"\"\"测试prefill修复效果\"\"\"\n    print(\"🧪 测试PREFILL修复效果\")\n    print(\"=\" * 50)\n    \n    # 连续检查几次队列状态\n    for i in range(5):\n        try:\n            response = requests.get(f\"{server_url}/diagnose\", timeout=5)\n            if response.status_code == 200:\n                data = response.json()\n                queue_stats = data.get('queue_stats', {})\n                detailed_info = queue_stats.get('detailed_queue_info', {})\n                \n                total_prefill = 0\n                total_decode = 0\n                \n                for gpu_id, info in detailed_info.items():\n                    prefill_count = info.get('prefill_queue_size', 0)\n                    decode_count = info.get('decode_queue_size', 0)\n                    total_prefill += prefill_count\n                    total_decode += decode_count\n                    \n                    language = info.get('language', 'unknown')\n                    print(f\"Check {i+1} - GPU {gpu_id} ({language}): {prefill_count}P + {decode_count}D\")\n                \n                active_sessions = queue_stats.get('active_sessions', 0)\n                \n                # 检查是否修复了prefill重复问题\n                if total_prefill > 1:\n                    print(f\"   🚨 仍然存在多个PREFILL: {total_prefill} 个\")\n                elif total_prefill == 1:\n                    print(f\"   ✅ PREFILL正常: {total_prefill} 个\")\n                else:\n                    print(f\"   ℹ️ 无PREFILL请求\")\n                \n                print(f\"   📊 总计: {total_prefill}P + {total_decode}D, {active_sessions} sessions\")\n                print()\n                \n            else:\n                print(f\"Check {i+1} - ❌ API错误: {response.status_code}\")\n                \n        except Exception as e:\n            print(f\"Check {i+1} - ❌ 检查失败: {e}\")\n        \n        if i < 4:  # 最后一次不等待\n            time.sleep(3)\n    \n    print(\"✅ 测试完成\")\n\nif __name__ == \"__main__\":\n    test_prefill_fix() 